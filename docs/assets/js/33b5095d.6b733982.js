"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[383],{16132:e=>{e.exports=JSON.parse('{"functions":[{"name":"_start","desc":"","params":[],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","private":true,"source":{"line":227,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"SetOptions","desc":"Used to set the options for AnalyticsService","params":[{"name":"options","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":358,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"LogPlayerEvent","desc":"Used to track player events (example: player killed an enemy, player completed a mission, etc.)\\n\\nExamples\\n```lua\\nAnalyticsService:LogPlayerEvent({\\n\\tuserId = player.UserId,\\n\\tevent = \\"Player:KilledEnemy\\",\\n\\tvalue = 1 -- Killed 1 enemy\\n})\\nAnalyticsService:LogPlayerEvent({\\n\\tuserId = player.UserId,\\n\\tevent = \\"Player:CompletedMission\\",\\n\\tvalue = 1 -- Completed 1 mission\\n})\\nAnalyticsService:LogPlayerEvent({\\n\\tuserId = player.UserId,\\n\\tevent = \\"Player:Death\\",\\n\\tvalue = 1\\n})\\n```","params":[{"name":"data","desc":"","lua_type":"PlayerEvent"}],"returns":[{"desc":"","lua_type":"{ [any]: any }"}],"function_type":"method","source":{"line":409,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"LogMarketplacePurchase","desc":"This function should be called when a successful marketplace purchase is made\\nsuch as a gamepass or developer product\\n\\nSet `logDevProductPurchases` to false when configuring AnalyticsService if you prefer to log\\ndeveloper product purchases within MarketplaceService.ProcessReceipt\\n\\n```lua\\n-- Inside MarketplaceService.ProcessReceipt\\n-- before returning Enum.ProductPurchaseDecision.PurchaseGranted\\nAnalyticsService:LogMarketplacePurchase({\\n\\tuserId = player.UserId,\\n\\titemType = \\"Product\\",\\n\\tid = 000000000, -- Developer product id\\n\\tcartType = \\"PromptPurchase\\",\\n})\\n```","params":[{"name":"data","desc":"","lua_type":"MarketplacePurchaseEvent"}],"returns":[{"desc":"","lua_type":"{ [any]: any }"}],"function_type":"method","source":{"line":453,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"LogPurchase","desc":"Shortcut function for LogResourceEvent\\nUsed to log in-game currency purchases\\n\\nExample Use:\\n```lua\\nAnalyticsService:LogPurchase({\\n\\tuserId = player.UserId,\\n\\teventType = \\"Shop\\",\\n\\tcurrency = \\"Coins\\",\\n\\titemId = \\"Red Paintball Gun\\"\\n})\\n```","params":[{"name":"data","desc":"","lua_type":"PurchaseEvent"}],"returns":[{"desc":"","lua_type":"{ [any]: any }"}],"function_type":"method","source":{"line":495,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"LogResourceEvent","desc":"Used to log in-game currency changes (example: player spent coins in a shop,\\nplayer purchased coins, player won coins in a mission)\\n\\nExample Use:\\n```lua\\n-- Player purchased 100 coins with Robux\\nAnalyticsService:LogPurchase({\\n\\tuserId = player.UserId,\\n\\teventType = \\"Purchase\\",\\n\\tcurrency = \\"Coins\\",\\n\\titemId = \\"100 Coins\\"\\n})\\n```","params":[{"name":"data","desc":"","lua_type":"ResourceEvent"}],"returns":[{"desc":"","lua_type":"{ [any]: any }"}],"function_type":"method","source":{"line":557,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"LogError","desc":"Used to log errors\\n\\nExample Use:\\n```lua\\nAnalyticsService:LogError({\\n\\tuserId = player.UserId,\\n\\tmessage = \\"Player tried to join a mission that doesn\'t exist named \'Invalid Mission Name\'\\",\\n\\tseverity = \\"Error\\"\\n})\\n```","params":[{"name":"data","desc":"","lua_type":"ErrorEvent"}],"returns":[{"desc":"","lua_type":"{ [any]: any }"}],"function_type":"method","source":{"line":609,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"LogProgression","desc":"Used to track player progression (example: player score in a mission or level).\\n\\nA progression can have up to 3 levels (example: Mission 1, Location 1, Level 1)\\n\\nIf a progression has 3 levels, then progression01, progression02, and progression03 are required.\\n\\nIf a progression has 2 levels, then progression01 and progression02 are required.\\n\\nOtherwise, only progression01 is required.\\n\\nExample:\\n```lua\\nAnalyticsService:LogProgression({\\n\\tuserId = player.UserId,\\n\\tstatus = \\"Start\\",\\n\\tprogression01 = \\"Mission X\\",\\n\\tprogression02 = \\"Location X\\",\\n\\tscore = 100 -- Started with score of 100\\n})\\nAnalyticsService:LogProgression({\\n\\tuserId = player.UserId,\\n\\tstatus = \\"Complete\\",\\n\\tprogression01 = \\"Mission X\\",\\n\\tprogression02 = \\"Location X\\",\\n\\tscore = 400 -- Completed the mission with a score of 400\\n})\\n```\\n\\nFor more information on progression events, refer to [GameAnalytics docs](https://docs.gameanalytics.com/integrations/sdk/roblox/event-tracking?_highlight=teleportdata#progression) on progression.","params":[{"name":"data","desc":"","lua_type":"ProgressionEvent"}],"returns":[{"desc":"","lua_type":"{ [any]: any }"}],"function_type":"method","source":{"line":666,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}}],"properties":[],"types":[{"name":"CustomDimensions","desc":"","fields":[{"name":"dimension01","lua_type":"string?","desc":""},{"name":"dimension02","lua_type":"string?","desc":""},{"name":"dimension03","lua_type":"string?","desc":""}],"source":{"line":93,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"AnalyticsOptions","desc":"","fields":[{"name":"currencies","lua_type":"{ string? }?","desc":"List of all in-game currencies (defaults to { \\"Coins\\" })"},{"name":"build","lua_type":"string?","desc":"Game version"},{"name":"gameKey","lua_type":"string","desc":"GameAnalytics game key"},{"name":"secretKey","lua_type":"string","desc":"GameAnalytics secret key"},{"name":"logDevProductPurchases","lua_type":"boolean?","desc":"Whether or not to automatically log developer product purchases (defaults to true)"},{"name":"resourceEventTypes","lua_type":"{ string? }?","desc":"List of all resource event types (example: player gained coins in a mission is a \\"Reward\\" event type, player purchasing coins with Robux is a \\"Purchase\\" event type)"},{"name":"gamepassIds","lua_type":"{ number? }?","desc":"List of all gamepass ids in the game"},{"name":"customDimensions01","lua_type":"CustomDimension?","desc":"Custom dimensions to be used in GameAnalytics (refer to [GameAnalytics docs](https://docs.gameanalytics.com/advanced-tracking/custom-dimensions) about dimensions)"}],"source":{"line":111,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"PlayerEvent","desc":"","fields":[{"name":"userId","lua_type":"number","desc":""},{"name":"event","lua_type":"string","desc":""},{"name":"value","lua_type":"number?","desc":""}],"source":{"line":129,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"MarketplacePurchaseEvent","desc":"","fields":[{"name":"userId","lua_type":"number","desc":""},{"name":"itemType","lua_type":"string","desc":""},{"name":"id","lua_type":"string","desc":""},{"name":"amount","lua_type":"number?","desc":""},{"name":"cartType","lua_type":"string","desc":""}],"source":{"line":144,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"PurchaseEvent","desc":"- Currency is the in-game currency type used, it must be defined in the self._options.currencies table","fields":[{"name":"userId","lua_type":"number","desc":""},{"name":"eventType","lua_type":"string","desc":"1 by default"},{"name":"itemId","lua_type":"string","desc":""},{"name":"currency","lua_type":"string","desc":"In-game currency type used"},{"name":"flowType","lua_type":"string?","desc":"Allowed flow types: \\"Sink\\", \\"Source\\" (defaults to \\"Sink\\")"},{"name":"amount","lua_type":"number?","desc":""}],"source":{"line":164,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"ResourceEvent","desc":"- Currency is the in-game currency type used, it must be defined in the self._options.currencies table","fields":[{"name":"userId","lua_type":"number","desc":""},{"name":"eventType","lua_type":"string","desc":""},{"name":"itemId","lua_type":"string","desc":"unique id of item (example: \\"100 Coins\\", \\"Coin Pack\\", \\"Red Loot Box\\", \\"Extra Life\\")"},{"name":"currency","lua_type":"string","desc":""},{"name":"flowType","lua_type":"string","desc":""},{"name":"amount","lua_type":"number","desc":""}],"source":{"line":185,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"ErrorEvent","desc":"","fields":[{"name":"message","lua_type":"string","desc":""},{"name":"severity","lua_type":"string?","desc":"Allowed severities: \\"Debug\\", \\"Info\\", \\"Warning\\", \\"Error\\", \\"Critical\\" (defaults to \\"Error\\")"},{"name":"userId","lua_type":"number","desc":""}],"source":{"line":201,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}},{"name":"ProgressionEvent","desc":"","fields":[{"name":"userId","lua_type":"number","desc":""},{"name":"status","lua_type":"string","desc":"Allowed statuses: \\"Start\\", \\"Fail\\", \\"Complete\\""},{"name":"progression01","lua_type":"string","desc":"Mission, Level, etc."},{"name":"progression02","lua_type":"string?","desc":"Location, etc."},{"name":"progression03","lua_type":"string?","desc":"Level, etc. (if used then progression02 is required)"},{"name":"score","lua_type":"number?","desc":"Adding a score is optional"}],"source":{"line":217,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}}],"name":"AnalyticsService","desc":"Author: Javi M (dig1t)\\n\\nKnit service that handles GameAnalytics API requests.\\n\\nThe API keys can be found inside game settings of your GameAnalytics game page.\\n\\nEvents that happen during a mission (kills, deaths, rewards) should be\\ntracked and logged after the event ends\\tto avoid hitting API limits.\\nFor example, if a player kills an enemy during a mission, the kill should be\\ntracked and logged (sum of kills) at the end of the mission.\\n\\nRefer to [GameAnalytics docs](https://docs.gameanalytics.com/integrations/sdk/roblox/event-tracking) for more information and use cases.\\n\\n### Quick Start\\n\\nIn order to use this service, you must first configure it with `AnalyticsService:SetOptions()` (example: in the main server script)\\n\\nTo configure AnalyticsService:\\n```lua\\nlocal AnalyticsService: any = Knit.GetService(\\"AnalyticsService\\")\\n\\nAnalyticsService:SetOptions({\\n\\tcurrencies = { \\"Coins\\" },\\n\\tbuild = \\"1.1.0\\",\\n\\tgameKey = \\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\",\\n\\tsecretKey = \\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\",\\n\\tlogDevProductPurchases: false,\\n\\tresourceEventTypes = {\\n\\t\\t\\"Reward\\",\\n\\t\\t\\"Purchase\\",\\n\\t\\t\\"Shop\\",\\n\\t\\t\\"Loot\\",\\n\\t\\t\\"Combat\\"\\n\\t},\\n\\tgamepassIds: { 000000000, 111111111 }\\n})\\n```\\n\\nUsing AnalyticsService to track events on the client:\\n```lua\\n-- Inside a LocalScript\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\nlocal Players = game:GetService(\\"Players\\")\\n\\nlocal Packages: any = ReplicatedStorage.Packages\\nlocal Knit: any = require(Packages.Knit)\\n\\nKnit.Start():await() -- Wait for Knit to start\\n\\nlocal AnalyticsService = Knit.GetService(\\"AnalyticsService\\")\\n\\nlocal timesOpenedShop: number = 2\\n\\nPlayers.PlayerRemoving:Connect(function(player: Player)\\n\\tif player == Players.LocalPlayer then\\n\\t\\t-- Before player leaves the game,\\n\\t\\t-- log the number of times the shop was opened\\n\\t\\tAnalyticsService.LogEvent:Fire({ -- Use AnalyticsService.LogEvent:Fire() to log a client-side event\\n\\t\\t\\tevent: \\"UIEvent:OpenedShop\\",\\n\\t\\t\\tvalue: timesOpenedShop -- Number of times the player opened their shop\\n\\t\\t})\\n\\tend\\nend)\\n```","source":{"line":79,"path":"src/Server/Services/Analytics/AnalyticsService.lua"}}')}}]);