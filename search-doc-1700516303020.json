[{"title":"DataTemplate","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/DataTemplate","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"DataTemplate","url":"/roblox-dsac-boilerplate/api/DataTemplate#types","content":" "},{"title":"Playerdata​","type":1,"pageTitle":"DataTemplate","url":"/roblox-dsac-boilerplate/api/DataTemplate#Playerdata","content":"&lt;/&gt; interface Playerdata { _build: string-- The version of the game that this player's data was last saved with } The default playerdata template for new players "},{"title":"Properties​","type":1,"pageTitle":"DataTemplate","url":"/roblox-dsac-boilerplate/api/DataTemplate#properties","content":" "},{"title":"name​","type":1,"pageTitle":"DataTemplate","url":"/roblox-dsac-boilerplate/api/DataTemplate#name","content":"&lt;/&gt; DataTemplate.name: KEYS_TO_IGNORE An array of strings to ignore w/replication to clients "},{"title":"Replica","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/Replica","content":"On this page Replica Replica class (Client)","keywords":""},{"title":"CallbackQueue","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/CallbackQueue","content":"On this page CallbackQueue Author(s): Jesse Appleton Date: 02/22/2022 Creates a queue of callbacks that execute in the sequence they were added. Waits until the callback has completed or the timeout has been reached to move on to the next one. FUNCTION CallbackQueue.new( processTimeout: number? = 60 ) -&gt; {} FUNCTION CallbackQueue:Add( fn: ()-&gt;(), ...: any ) -&gt; ( Promise ) FUNCTION CallbackQueue:AddAsync( fn: ()-&gt;(), ...: any ) -&gt; ( ...any )","keywords":""},{"title":"ReplicaUtil","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/ReplicaUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ReplicaUtil","url":"/roblox-dsac-boilerplate/api/ReplicaUtil#functions","content":" "},{"title":"getParent​","type":1,"pageTitle":"ReplicaUtil","url":"/roblox-dsac-boilerplate/api/ReplicaUtil#getParent","content":"&lt;/&gt; ReplicaUtil.getParent( path: string, data: {any} ) → ( {any}?, string? ) return table, string "},{"title":"PlayerService","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/PlayerService","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"PlayerService","url":"/roblox-dsac-boilerplate/api/PlayerService#functions","content":" "},{"title":"KnitInit​","type":1,"pageTitle":"PlayerService","url":"/roblox-dsac-boilerplate/api/PlayerService#KnitInit","content":"&lt;/&gt; PlayerService:KnitInit() → nil Initialize PlayerService  "},{"title":"KnitStart​","type":1,"pageTitle":"PlayerService","url":"/roblox-dsac-boilerplate/api/PlayerService#KnitStart","content":"&lt;/&gt; PlayerService:KnitStart() → nil Start PlayerService "},{"title":"ReplicaController","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/ReplicaController","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ReplicaController","url":"/roblox-dsac-boilerplate/api/ReplicaController#functions","content":" "},{"title":"replicaOfClassCreated​","type":1,"pageTitle":"ReplicaController","url":"/roblox-dsac-boilerplate/api/ReplicaController#replicaOfClassCreated","content":"&lt;/&gt; ReplicaController:replicaOfClassCreated( class: string,-- The class of replica that you want to connect to (Eg. &quot;Playerdata&quot;) callback: function-- A function that will be called when a new Replica object of the same class parameter is created - only argument provided is the newly created Replica object ) → function-- Returns a function that (When called) disconnects the created script connection When a new Replica object of the 'class' parameter is added, the 'callback' function is called (The provided argument is the new Replica object)  "},{"title":"KnitInit​","type":1,"pageTitle":"ReplicaController","url":"/roblox-dsac-boilerplate/api/ReplicaController#KnitInit","content":"&lt;/&gt; ReplicaController:KnitInit() → () Initialize ReplicaController  "},{"title":"KnitStart​","type":1,"pageTitle":"ReplicaController","url":"/roblox-dsac-boilerplate/api/ReplicaController#KnitStart","content":"&lt;/&gt; ReplicaController:KnitStart() → () Start ReplicaController "},{"title":"DataController","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/DataController","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"DataController","url":"/roblox-dsac-boilerplate/api/DataController#properties","content":" "},{"title":"DATA_LOAD_TIMEOUT​","type":1,"pageTitle":"DataController","url":"/roblox-dsac-boilerplate/api/DataController#DATA_LOAD_TIMEOUT","content":"&lt;/&gt; DataController.DATA_LOAD_TIMEOUT: number The max amount of time to wait for the playerdata to be cached on the client (From the server) on init before timing out and rejecting any associated promises/fallback behavior "},{"title":"Functions​","type":1,"pageTitle":"DataController","url":"/roblox-dsac-boilerplate/api/DataController#functions","content":" "},{"title":"GetData​","type":1,"pageTitle":"DataController","url":"/roblox-dsac-boilerplate/api/DataController#GetData","content":"This item only works when running on the client. Client This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DataController:GetData() → Promise&lt;T&gt;-- Returns a promise that resolves with the playerdata/rejects if unable to get playerdata Returns a promise that resolves with the playerdata once successfully loaded for the first time, and rejects if the player's data cannot be retrieved for some reason  "},{"title":"GetKey​","type":1,"pageTitle":"DataController","url":"/roblox-dsac-boilerplate/api/DataController#GetKey","content":"This item only works when running on the client. Client &lt;/&gt; DataController:GetKey( Key: string-- The key that you want to lookup in the player data table ) → Promise&lt;T&gt;-- Returns a promise that resolves w/the value from the player's data, and rejects if the player's data could not be loaded in time and/or the key does not exist Returns a promise that resolves with a specific value (Looked up by key) from the playerdata, and rejects if the playerdata was unable to be loaded/the key does not exist  "},{"title":"GetKeyUpdatedSignal​","type":1,"pageTitle":"DataController","url":"/roblox-dsac-boilerplate/api/DataController#GetKeyUpdatedSignal","content":"This item only works when running on the client. Client This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DataController:GetKeyUpdatedSignal( Key: string-- The key that you want to lookup in the player data table. Can be a specific path if desired (Eg. &quot;Currencies&quot; to listen to currency changes as a whole or &quot;Currencies.Coins&quot; to listen to all coin changes) ) → Promise&lt;T&gt;-- Returns a promise that resolves w/a signal that fires when the specific key is updated, and rejects if the playerdata isn't loaded in-time Returns a signal that fires (With the value) when the Key argument in the playerdata is updated  "},{"title":"DisconnectKeyUpdatedSignal​","type":1,"pageTitle":"DataController","url":"/roblox-dsac-boilerplate/api/DataController#DisconnectKeyUpdatedSignal","content":"This item only works when running on the client. Client &lt;/&gt; DataController:DisconnectKeyUpdatedSignal( Key: string-- The key to disconnect - can be a specific path if desired (Eg. &quot;Currencies&quot; to disconnect a signal for &quot;Currencies&quot; or &quot;Currencies.Coins&quot; to disconnect the &quot;Coins&quot; signal) ) → nil Removes a data updated connection from the table Warning: Will disconnect all events tied to that key!  "},{"title":"KnitInit​","type":1,"pageTitle":"DataController","url":"/roblox-dsac-boilerplate/api/DataController#KnitInit","content":"&lt;/&gt; DataController:KnitInit() → nil Initialize DataController Get the replica of the playerdata from the server, and then set the cachedPlayerdata varaible as the replica  "},{"title":"KnitStart​","type":1,"pageTitle":"DataController","url":"/roblox-dsac-boilerplate/api/DataController#KnitStart","content":"&lt;/&gt; DataController:KnitStart() → nil Start DataController "},{"title":"ReplicaService","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/ReplicaService","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ReplicaService","url":"/roblox-dsac-boilerplate/api/ReplicaService#functions","content":" "},{"title":"CreateReplica​","type":1,"pageTitle":"ReplicaService","url":"/roblox-dsac-boilerplate/api/ReplicaService#CreateReplica","content":"&lt;/&gt; ReplicaService:CreateReplica( ClassName: string,-- The ClassName of the Replica object Replication: {Player } | Player ,-- An array of (Or single) player(s) to replicate this data to Tags: {string},-- An optional array of strings to assign to this object (For keeping track of inheritance) Body: {any}-- A key/pair table of values to replicate to the client (Accepts strings as keys, and key/pair values/arrays - do not mix key/pair + arrays together!) ) → Promise&lt;T&gt;-- Returns a promise that resolves with Replica, replicaId: string if a replica is successfully created, and rejects if it is not Create a new Replica object  "},{"title":"KnitInit​","type":1,"pageTitle":"ReplicaService","url":"/roblox-dsac-boilerplate/api/ReplicaService#KnitInit","content":"&lt;/&gt; ReplicaService:KnitInit() → () Initialize ReplicaService  "},{"title":"KnitStart​","type":1,"pageTitle":"ReplicaService","url":"/roblox-dsac-boilerplate/api/ReplicaService#KnitStart","content":"&lt;/&gt; ReplicaService:KnitStart() → () Start ReplicaService "},{"title":"ServerReplica","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/ServerReplica","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ServerReplica","url":"/roblox-dsac-boilerplate/api/ServerReplica#functions","content":" "},{"title":"SetValue​","type":1,"pageTitle":"ServerReplica","url":"/roblox-dsac-boilerplate/api/ServerReplica#SetValue","content":"&lt;/&gt; ServerReplica:SetValue( path: stringThepathtoupdate., value: anyThevaluetoupdatethepathto. ) → Promise&lt;T&gt;-- Returns a promise that resolves if updated data should be sent to the client (An array of arguments to send via the ReplicaService.newReplica signal), and rejects if the key is the same/errors Sets value from path.  "},{"title":"SetValues​","type":1,"pageTitle":"ServerReplica","url":"/roblox-dsac-boilerplate/api/ServerReplica#SetValues","content":"&lt;/&gt; ServerReplica:SetValues( path: stringThepathtoupdate., values: tableAdictionaryofvaluestoupdate. ) → Promise&lt;T&gt;-- Returns a promise that resolves if updated data should be sent to the client (An array of arguments to send via the ReplicaService.replicaListener signal), and rejects if the key is the same/errors Sets multiple values at once from the path  "},{"title":"ArrayInsert​","type":1,"pageTitle":"ServerReplica","url":"/roblox-dsac-boilerplate/api/ServerReplica#ArrayInsert","content":"&lt;/&gt; ServerReplica:ArrayInsert( path: stringThepathofthearraytoupdate., value: anyThevaluetoinsertintothepatharray. ) → Promise&lt;T&gt;-- Returns a promise that resolves with the data that should be replicated to the client + the length of the new array (An array of arguments to send via the ReplicaService.replicaListener signal), and rejects if the pointer does not exist Inserts value into array found at the specified path.  "},{"title":"ArraySet​","type":1,"pageTitle":"ServerReplica","url":"/roblox-dsac-boilerplate/api/ServerReplica#ArraySet","content":"&lt;/&gt; ServerReplica:ArraySet( path: stringThepathofthearraytoupdate, index: numberTheindextoupdateinthespecifiedtable, value: anyThevaluetosettheindexto ) → Promise&lt;T&gt;-- Returns a promise that resolves with the data that should be replicated to the client + the index (An array of arguments to send via the ReplicaService.replicaListener signal), and rejects if the pointer does not exist, the index is not already set, or if the index value is equal to the new value Sets index of array found at the specified path  "},{"title":"ArrayRemove​","type":1,"pageTitle":"ServerReplica","url":"/roblox-dsac-boilerplate/api/ServerReplica#ArrayRemove","content":"&lt;/&gt; ServerReplica:ArrayRemove( path: stringThepathofthearraytoupdate., index: numberTheindextoremovefromthearray. ) → Promise&lt;T&gt;-- Returns a promise that resolves with the data that should be replicated to the client + the removed value (An array of arguments to send via the ReplicaService.replicaListener signal), and rejects if the pointer does not exist, the index is not already set, or if the index value is equal to the new value Removes index from array found at the specified path. "},{"title":"PlayerdataService","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/PlayerdataService","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#properties","content":" "},{"title":"STORE_NAME​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#STORE_NAME","content":"&lt;/&gt; PlayerdataService.STORE_NAME: string The datastore to use with profileservice for storing playerdata  "},{"title":"DATA_PREFIX​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#DATA_PREFIX","content":"&lt;/&gt; PlayerdataService.DATA_PREFIX: string The prefix to amend to the key used for saving playerdata (Eg. &quot;Playerdata_123&quot;)  "},{"title":"DATA_LOAD_RETRIES​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#DATA_LOAD_RETRIES","content":"&lt;/&gt; PlayerdataService.DATA_LOAD_RETRIES: number The maximum amount of times to try to load a player's data (On joining the game) before rejecting the promise associated w/it  "},{"title":"DATA_LOAD_RETRY_DELAY​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#DATA_LOAD_RETRY_DELAY","content":"&lt;/&gt; PlayerdataService.DATA_LOAD_RETRY_DELAY: number How long to wait between failed attempts with loading a player's data (On joining the game) before retrying  "},{"title":"LOAD_PLAYERDATA_IN_STUDIO​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#LOAD_PLAYERDATA_IN_STUDIO","content":"&lt;/&gt; PlayerdataService.LOAD_PLAYERDATA_IN_STUDIO: boolean Boolean that determines whether player save profiles should be loaded while in a Roblox studio session If true, playerdata will load in studio. If false, playerdata will not be loaded in studio "},{"title":"Functions​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#functions","content":" "},{"title":"GetPlayerdata​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#GetPlayerdata","content":"This item only works when running on the client. Client &lt;/&gt; PlayerdataService:GetPlayerdata(Player: Player ) → Promise&lt;T&gt;-- A promise that resolves with a table of the player's data if the playerdata exists, and rejects if the playerdata does not exist Returns a promise that resolves with a table of the player's data, and rejects if it cannot be retrieved for some reason If the playerdata is not loaded already, :_createPlayerdataProfile(Player: Player) will be called server-side first  "},{"title":"GetPlayerdata​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#GetPlayerdata","content":"This item only works when running on the server. Server &lt;/&gt; PlayerdataService:GetPlayerdata(Player: Player ) → Promise&lt;T&gt;-- A promise that resolves with a table of the player's data if the playerdata exists, and rejects if the playerdata does not exist Returns a promise that resolves with a table of the player's data, and rejects if it cannot be retrieved for some reason If the playerdata is not loaded already, :_createPlayerdataProfile(Player: Player) will be called first  "},{"title":"KnitInit​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#KnitInit","content":"This item only works when running on the server. Server &lt;/&gt; PlayerdataService:KnitInit() → nil Initialize PlayerdataService  "},{"title":"KnitStart​","type":1,"pageTitle":"PlayerdataService","url":"/roblox-dsac-boilerplate/api/PlayerdataService#KnitStart","content":"This item only works when running on the server. Server &lt;/&gt; PlayerdataService:KnitStart() → nil Start PlayerdataService "},{"title":"BrainTrackingController","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/BrainTrackingController","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#properties","content":" "},{"title":"AD_IMPRESSION_STUD_RANGE​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#AD_IMPRESSION_STUD_RANGE","content":"&lt;/&gt; BrainTrackingController.AD_IMPRESSION_STUD_RANGE: number How close the player needs to be (From an ad impression part) for it to qualify as an impression  "},{"title":"AD_IMPRESSION_REPORT_THRESHOLD​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#AD_IMPRESSION_REPORT_THRESHOLD","content":"&lt;/&gt; BrainTrackingController.AD_IMPRESSION_REPORT_THRESHOLD: number How many impressions a specific ad part needs to have in order to send an impression event to the server Eg. AD_IMPRESSION_REPORT_THRESHOLD is 10, if the specific ad part is on the player's screen for &gt; 10 seconds (Cumulative), it is reported to the server and then the threshold is reset to 0  "},{"title":"POSITION_REPORTING_TIME​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#POSITION_REPORTING_TIME","content":"&lt;/&gt; BrainTrackingController.POSITION_REPORTING_TIME: number How often to report the character's position to the server for tracking purposes  "},{"title":"IMPRESSION_REPORTING_TIME​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#IMPRESSION_REPORTING_TIME","content":"&lt;/&gt; BrainTrackingController.IMPRESSION_REPORTING_TIME: number How often to check (In seconds) for ads that are present on the player's screen  "},{"title":"table​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#table","content":"&lt;/&gt; BrainTrackingController.table: LOGO_ASSETS An array of image IDs that should be tracked (Decals/textures should be located under parts tagged with BRAINTRACK_COLLECITONTAG) Image IDs can be defined here as strings, or added via BrainTrackingController:AddLogoToTrack(logoTexture: string)  "},{"title":"BRAINTRACK_COLLECTIONTAG​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#BRAINTRACK_COLLECTIONTAG","content":"&lt;/&gt; BrainTrackingController.BRAINTRACK_COLLECTIONTAG: string The tag that CollectionService will use for keeping track of parts to track ad impressions with "},{"title":"Functions​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#functions","content":" "},{"title":"AddLogoToTrack​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#AddLogoToTrack","content":"&lt;/&gt; BrainTrackingController:AddLogoToTrack( logoTexture: string-- The decal/texture ID of the logo we're tracking ) → nil Adds a logo to be tracked (Via decal/texture ID) to the list of logos to be tracked  "},{"title":"KnitInit​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#KnitInit","content":"&lt;/&gt; BrainTrackingController:KnitInit() → nil Initialize BrainTrackingController  "},{"title":"KnitStart​","type":1,"pageTitle":"BrainTrackingController","url":"/roblox-dsac-boilerplate/api/BrainTrackingController#KnitStart","content":"&lt;/&gt; BrainTrackingController:KnitStart() → nil Start BrainTrackingController "},{"title":"Types","type":0,"sectionRef":"#","url":"/roblox-dsac-boilerplate/api/Types","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Types","url":"/roblox-dsac-boilerplate/api/Types#types","content":" "},{"title":"ANY_TABLE​","type":1,"pageTitle":"Types","url":"/roblox-dsac-boilerplate/api/Types#ANY_TABLE","content":"&lt;/&gt; type ANY_TABLE = {[any]: any} Generic table type (Wildcard) - accepts any values  "},{"title":"ReplicaPathListener​","type":1,"pageTitle":"Types","url":"/roblox-dsac-boilerplate/api/Types#ReplicaPathListener","content":"&lt;/&gt; type ReplicaPathListener = ( newValue: any, oldValue: any ) → ()   "},{"title":"ReplicaListener​","type":1,"pageTitle":"Types","url":"/roblox-dsac-boilerplate/api/Types#ReplicaListener","content":"&lt;/&gt; type ReplicaListener = (replica: Replica) → ()   "},{"title":"ReplicaParams​","type":1,"pageTitle":"Types","url":"/roblox-dsac-boilerplate/api/Types#ReplicaParams","content":"&lt;/&gt; type ReplicaParams = { ClassName: string, Data: {[string]: any}, Tags: {[string]: any}, Replication: (string | {Player }) } Replica class parameters  "},{"title":"ReplicaPath​","type":1,"pageTitle":"Types","url":"/roblox-dsac-boilerplate/api/Types#ReplicaPath","content":"&lt;/&gt; type ReplicaPath = {string} A path to a key in the player's data (Eg. &quot;_configuration._build&quot;)  "},{"title":"Replica​","type":1,"pageTitle":"Types","url":"/roblox-dsac-boilerplate/api/Types#Replica","content":"&lt;/&gt; type Replica = {} ClassName: string, Data: { any }, Tags: { any }, Replication: { any }, SetParent: (self: Replica, replica: Replica) -&gt; (), DestroyFor: (self: Replica, Player) -&gt; (), Destroy: (self: Replica) -&gt; (), SetValue: (self: Replica, path: string, value: any) -&gt; (), SetValues: (self: Replica, path: string, values: { [string]: any }) -&gt; (), ArrayInsert: (self: Replica, path: string, value: any) -&gt; (), ArraySet: (self: Replica, path: string, index: number, value: any) -&gt; (), ArrayRemove: (self: Replica, path: string, index: number) -&gt; (), ConnectOnServerEvent: (self: Replica, listener: () -&gt; ()) -&gt; (), ConnectOnClientEvent: (self: Replica, listener: () -&gt; ()) -&gt; (), ListenToChildAdded: (self: Replica, child: Replica) -&gt; (), ListenToRaw: (self: Replica, listener: (listenerType: string, path: { string }, any) -&gt; ()) -&gt; (), ListenToChange: (self: Replica, path: string, listener: (newValue: any, oldValue: any) -&gt; ()) -&gt; (), ListenToNewKey: (self: Replica, path: string, listener: (value: any, newKey: string) -&gt; ()) -&gt; (), ListenToKeyChanged: (self: Replica, path: string, listener: (newValue: any, oldValue: any) -&gt; ()) -&gt; (), ListenToArrayInsert: (self: Replica, path: string, listener: (index: number, value: any) -&gt; ()) -&gt; (), ListenToArraySet: (self: Replica, path: string, listener: (index: number, value: any) -&gt; ()) -&gt; (), ListenToArrayRemove: (self: Replica, path: string, listener: (index: number, value: any) -&gt; ()) -&gt; (), } The members of the server/client Replica controller/service "}]