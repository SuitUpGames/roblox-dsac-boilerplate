{
	// Place your snippets for lua here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"KnitService": {
		"prefix": "knitservice",
		"body": [
			"--[=["
			"@class ${TM_FILENAME_BASE}Service"
			"\nAuthor: ${1:Your name}"
			"Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR"
			"Project: $WORKSPACE_NAME"

			"\nDescription: Knit service description goes here"
			"]=]"

			"\n--GetService calls"
			"local Players = game:GetService(\"Players\")"
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")"
			"local RunService = game:GetService(\"RunService\")"
			"local ServerScriptService = game:GetService(\"ServerScriptService\")"
			"local ServerStorage = game:GetService(\"ServerStorage\")"

			"\n--Types"
			"local Types = require(ReplicatedStorage.Shared.Modules.Data.Types)"

			"\ntype ANY_TABLE = Types.ANY_TABLE"

			"\n--Module imports (Require)"
			"local Knit: ANY_TABLE = require(ReplicatedStorage.Packages.Knit)"

			"\nlocal ${TM_FILENAME_BASE}Service: ANY_TABLE = Knit.CreateService({"
			"\tName = \"${TM_FILENAME_BASE}Service\","
			"\tClient = {}"
			"})"

			"\nlocal PACKAGES: Folder = ReplicatedStorage.Packages"

			"\n--[=["
			"\tInitialize ${TM_FILENAME_BASE}Service"
			"]=]"

			"function ${TM_FILENAME_BASE}Service:KnitInit()"
			"\t"
			"end"

			"\n--[=["
			"\tStart ${TM_FILENAME_BASE}Service"
			"]=]"
			"function ${TM_FILENAME_BASE}Service:KnitStart()"
			"\t"
			"end"
			"\n"
			"return ${TM_FILENAME_BASE}Service"
		],
		"description": "Populates the document w/a boilerplate Knit service template"
	}
}